/**
 * @description This ruleset enforces a strict role-based access control model for managing products, product variants, and product reviews.
 *   It assumes the existence of an 'admin' role to control product creation, updates, and deletion. User profiles are self-managed.
 * @dataStructure
 *   - `/users/{userId}`: Stores user profile information, accessible and modifiable only by the user themselves.
 *   - `/products/{productId}`: Stores product information, accessible for reading by everyone, but manageable (create, update, delete) only by admins.
 *   - `/products/{productId}/variants/{variantId}`: Stores product variants, manageable only by admins.
 *   - `/products/{productId}/reviews/{reviewId}`: Stores product reviews, open for creation, but not for listing.
 * @keySecurityDecisions
 *   - Only authenticated users can create user profiles.
 *   - Only users with the "admin" role can create, update, or delete products and their variants.
 *   - Public read access for `/products/{productId}` is allowed.
 *   - Listing of reviews is disallowed.
 * @denormalizationForAuthorization
 *   - Assumes a mechanism to set a custom claim "admin": true for administrative users (outside of these rules).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, update, delete) - Authenticated user can read, update, and delete their own profile.
     * @deny (create) - Unauthenticated user cannot create any profile.
     * @deny (get, update, delete) - Authenticated user cannot access another user's profile.
     * @principle Enforces user-ownership: Only the authenticated user can manage their own profile.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.uid == request.auth.uid;
      allow get, update, delete: if isSignedIn() && isOwner(userId) && resource.data.uid == resource.data.uid;
      allow list: if false;
    }

    /**
     * @description Controls access to products.
     * @path /products/{productId}
     * @allow (get, list) - Anyone can read product information.
     * @allow (create, update, delete) - Only users with the "admin" role can create, update, or delete products.
     * @deny (create, update, delete) - Users without the "admin" role cannot create, update, or delete products.
     * @principle Enforces role-based access control: Only admins can manage products. Allows public reads.
     */
    match /products/{productId} {
      function isAdmin() {
        return request.auth.token.admin == true;
      }

      allow get, list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Controls access to product variants.
     * @path /products/{productId}/variants/{variantId}
     * @allow (create, update, delete) - Only users with the "admin" role can create, update, or delete product variants.
     * @deny (create, update, delete) - Users without the "admin" role cannot create, update, or delete product variants.
     * @principle Enforces role-based access control: Only admins can manage product variants.
     */
    match /products/{productId}/variants/{variantId} {
      function isAdmin() {
        return request.auth.token.admin == true;
      }

      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

        /**
         * @description Controls access to product reviews.
         * @path /products/{productId}/reviews/{reviewId}
         * @allow (create) - Any authenticated user can create a review.
         * @deny (list) - No one can list reviews. This is a deliberate security choice.
         * @principle Allows users to create reviews but prevents listing for security reasons.
         */
        match /products/{productId}/reviews/{reviewId} {
            function isSignedIn() {
                return request.auth != null;
            }

            allow create: if isSignedIn();
            allow get: if false;
            allow list: if false;
            allow update: if false;
            allow delete: if false;
        }
  }
}