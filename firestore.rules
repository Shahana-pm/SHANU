/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles,
 * and allows public read access to product information while restricting
 * write access to authenticated users only. The rules prioritize
 * authorization and relational integrity while remaining flexible on
 * data shapes for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information.
 * - /products/{productId}: Stores core product information.
 * - /products/{productId}/variants/{variantId}: Stores product variants (e.g., color options).
 * - /products/{productId}/reviews/{reviewId}: Stores user reviews for products.
 *
 * Key Security Decisions:
 * - User profiles are only readable and writable by the owning user.
 * - Products and their variants are publicly readable, but creation, modification, and deletion are restricted to authenticated users (no role-based access yet).
 * - Reviews are publicly readable, but creation, modification, and deletion are restricted to authenticated users.
 * - Data type and schema validation are relaxed to facilitate rapid iteration. Only essential relational integrity checks are enforced.
 *
 * Denormalization for Authorization:
 *  - Currently, no denormalization is applied. Future iterations may include denormalizing ownership fields to product documents if finer-grained write access control is needed.
 *
 * Structural Segregation:
 *  - No structural segregation is used.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (get, create, update, delete) if request.auth.uid == userId
     * @deny (get, create, update, delete) if request.auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Prevent listing of all users
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows public read access to products, but restricts creation, updates, and deletion to authenticated users.
     * @path /products/{productId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @principle Public read, authenticated-user-only writes.
     */
    match /products/{productId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to product variants, but restricts creation, updates, and deletion to authenticated users.
     * @path /products/{productId}/variants/{variantId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @principle Public read, authenticated-user-only writes.
     */
    match /products/{productId}/variants/{variantId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows public read access to product reviews, but restricts creation, updates, and deletion to authenticated users.
     * @path /products/{productId}/reviews/{reviewId}
     * @allow (get, list) if true
     * @allow (create) if isSignedIn()
     * @allow (update, delete) if isSignedIn()
     * @deny (create) if !isSignedIn()
     * @deny (update, delete) if !isSignedIn()
     * @principle Public read, authenticated-user-only writes.
     */
    match /products/{productId}/reviews/{reviewId} {
        function isSignedIn() {
          return request.auth != null;
        }

        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && resource != null;
        allow delete: if isSignedIn() && resource != null;
    }
  }
}